generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement()) @map("id")
  email       String        @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String        @unique
  profileImg  String?
  birthDate   DateTime?
  point       Int?          @default(0)
  isVerified  Boolean       @default(false)
  isAdmin     Boolean       @default(false)
  isBanned    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  lastLoginAt DateTime      @default(now())
  locations   Location[]
  items       Item[]
  ownerRents  Rent[]        @relation("ownerRents")
  renterRents Rent[]        @relation("renterRents")
  reports     Report[]
  wallets     Wallet[]
  chatRoomA   ChatRoom[]    @relation("userA")
  chatRoomB   ChatRoom[]    @relation("userB")
  chatMessage ChatMessage[]
}

model Wallet {
  id           Int         @id @default(autoincrement()) @map("id")
  userId       Int
  amount       Decimal
  updatedAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id       Int     @id @default(autoincrement()) @map("id")
  walletId Int
  rentId   Int
  amount   Decimal
  createdAt   DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  wallet   Wallet  @relation(fields: [walletId], references: [id])
  rent     Rent    @relation(fields: [rentId], references: [id])
}

model Location {
  id       Int     @id @default(autoincrement()) @map("id")
  userId   Int
  location String
  detail   String?
  user     User    @relation(fields: [userId], references: [id])
}

model Item {
  id           Int         @id @default(autoincrement()) @map("id")
  ownerId      Int
  categoriesId Int
  title        String
  description  String      @db.LongText
  status       item_status @default(stock)
  price        Decimal
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  owner        User        @relation(fields: [ownerId], references: [id])
  categories   categories  @relation(fields: [categoriesId], references: [id])
  images       ItemImage[]
  rents        Rent[]
}

model categories {
  id    Int    @id @default(autoincrement()) @map("id")
  name  String
  items Item[]
}

model ItemImage {
  id       Int    @id @default(autoincrement()) @map("id")
  itemId   Int
  imageUrl String
  position Int
  createAt DateTime @default(now())
  item     Item   @relation(fields: [itemId], references: [id])
}

model ChatRoom {
  id           Int           @id @default(autoincrement()) @map("id")
  userAId      Int
  userBId      Int
  userASeen    DateTime
  userBSeen    DateTime
  userA        User          @relation("userA", fields: [userAId], references: [id])
  userB        User          @relation("userB", fields: [userBId], references: [id])
  chatMessages ChatMessage[]
}

model ChatMessage {
  id         Int          @id @default(autoincrement()) @map("id")
  chatroomId Int
  senderId   Int
  message    String
  type       message_type
  date       DateTime
  chatroom   ChatRoom     @relation(fields: [chatroomId], references: [id])
  sender     User         @relation(fields: [senderId], references: [id])
}

model Rent {
  id            Int           @id @default(autoincrement()) @map("id")
  ownerId       Int
  renteeId      Int
  itemId        Int
  createdAt     DateTime      @default(now())
  startRentDate DateTime
  endRentDate   DateTime
  status        order_status  @default(inprocess)
  amount        Decimal
  deposit       Decimal
  owner         User          @relation("ownerRents", fields: [ownerId], references: [id])
  rentee        User          @relation("renterRents", fields: [renteeId], references: [id])
  item          Item          @relation(fields: [itemId], references: [id])
  reports       Report[]
  transactions  Transaction[]
}

model Report {
  id           Int         @id @default(autoincrement()) @map("id")
  userId       Int
  rentId       Int
  detail       String?     @db.VarChar(1000)
  user         User        @relation(fields: [userId], references: [id])
  rent         Rent        @relation(fields: [rentId], references: [id])
  reportImages ReportImg[]
}

model ReportImg {
  id           Int    @id @default(autoincrement()) @map("id")
  reportItemId Int
  img_url      String
  damagedItem  Report @relation(fields: [reportItemId], references: [id])
}

enum item_status {
  stock
  available
  reserve
  renting
}

enum order_status {
  inprocess
  renting
  completed
  dispute
}

enum message_type {
  message
  video
  image
}
