
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.5.2
 * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
 */
Prisma.prismaVersion = {
  client: "5.5.2",
  engine: "aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  profileImg: 'profileImg',
  birthDate: 'birthDate',
  point: 'point',
  isVerified: 'isVerified',
  isAdmin: 'isAdmin',
  isBanned: 'isBanned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  rentId: 'rentId',
  amount: 'amount'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  location: 'location',
  detail: 'detail'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  categoriesId: 'categoriesId',
  title: 'title',
  description: 'description',
  status: 'status',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ItemImageScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  imageUrl: 'imageUrl',
  position: 'position',
  createAt: 'createAt'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  userAId: 'userAId',
  userBId: 'userBId',
  userASeen: 'userASeen',
  userBSeen: 'userBSeen'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  chatroomId: 'chatroomId',
  senderId: 'senderId',
  message: 'message',
  type: 'type',
  date: 'date'
};

exports.Prisma.RentScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  renteeId: 'renteeId',
  itemId: 'itemId',
  createdAt: 'createdAt',
  startRentDate: 'startRentDate',
  endRentDate: 'endRentDate',
  status: 'status',
  amount: 'amount',
  deposit: 'deposit'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  rentId: 'rentId',
  detail: 'detail'
};

exports.Prisma.ReportImgScalarFieldEnum = {
  id: 'id',
  reportItemId: 'reportItemId',
  img_url: 'img_url'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.item_status = exports.$Enums.item_status = {
  stock: 'stock',
  available: 'available',
  reserve: 'reserve',
  renting: 'renting'
};

exports.message_type = exports.$Enums.message_type = {
  message: 'message',
  video: 'video',
  image: 'image'
};

exports.order_status = exports.$Enums.order_status = {
  inprocess: 'inprocess',
  renting: 'renting',
  completed: 'completed',
  dispute: 'dispute'
};

exports.Prisma.ModelName = {
  User: 'User',
  Wallet: 'Wallet',
  Transaction: 'Transaction',
  Location: 'Location',
  Item: 'Item',
  categories: 'categories',
  ItemImage: 'ItemImage',
  ChatRoom: 'ChatRoom',
  ChatMessage: 'ChatMessage',
  Rent: 'Rent',
  Report: 'Report',
  ReportImg: 'ReportImg'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
